generator client {
  provider        = "prisma-client"
  previewFeatures = ["nativeDistinct", "relationJoins"]
  output          = "./generated"
  moduleFormat    = "esm"
}

datasource db {
  provider  = "mysql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Items {
  internal_id Int       @id @default(autoincrement())
  item_id     Int?      @unique
  name        String
  description String?   @db.Text
  image       String?   @db.VarChar(2200)
  image_id    String?
  category    String?
  rarity      Int?
  weight      Int?
  type        ItemType  @default(np)
  est_val     Int?
  specialType String?
  releaseDate DateTime?
  retiredDate DateTime?
  status      String?
  comment     String?   @db.Text

  slug String? @unique

  addedAt   DateTime @default(now())
  updatedAt DateTime @updatedAt

  isNC       Boolean
  isWearable Boolean @default(false)
  isNeohome  Boolean @default(false)
  isBD       Boolean @default(false)

  canRead ThreeStateBoolean @default(unknown)
  canEat  ThreeStateBoolean @default(unknown)
  canPlay ThreeStateBoolean @default(unknown)
  canOpen ThreeStateBoolean @default(unknown)

  imgCacheOverride String?

  translation ItemTranslation[]
  child_itens OpenableItems[]   @relation("parentItem")
  inside_at   OpenableItems[]   @relation("childItem")

  prices    ItemPrices[]
  owlsPrice OwlsPrice[]

  atLists ListItems[]

  tags ItemTags[]

  canonical_id Int?
  canonical    Items?  @relation("canonical", fields: [canonical_id], references: [internal_id], onDelete: SetNull, onUpdate: Cascade)
  clone        Items[] @relation("canonical")

  lastSeen              LastSeen[]
  priceProcess          PriceProcess2[]
  restockAuctionHistory RestockAuctionHistory[]
  processHistory        PriceProcessHistory[]
  effects               ItemEffect[]
  wearableData          WearableData[]
  ncMallData            NcMallData[]
  saleStats             SaleStats[]
  ItemRecipes           ItemRecipes[]
  ItemIngredients       ItemIngredients[]
  DataCollecting        DataCollecting[]
  PetpetColors          PetpetColors[]
  NCTradeItems          ncTradeItems[]
  ncValues              ncValues[]

  @@index([name, image_id])
  @@index([image_id])
  @@index([category, rarity, est_val])
  @@fulltext([name])
  @@fulltext([description])
  @@fulltext([name, description])
}

enum ThreeStateBoolean {
  true
  unknown
  false
}

model ItemTranslation {
  translation_id Int     @id @default(autoincrement())
  name           String
  image_id       String?
  description    String? @db.Text
  category       String?
  est_val        Int?
  item           Items?  @relation(fields: [item_id], references: [item_id], onDelete: SetNull, onUpdate: Cascade)
  item_id        Int?
  language       String

  @@index([name, image_id])
}

model ItemProcess {
  internal_id Int       @id @default(autoincrement())
  item_id     Int?
  name        String
  description String?   @db.Text
  image       String?   @db.Text
  image_id    String?
  category    String?
  rarity      Int?
  weight      Int?
  isNC        Boolean
  isBD        Boolean   @default(false)
  type        ItemType  @default(np)
  est_val     Int?
  specialType String?
  status      String?
  releaseDate DateTime?
  retiredDate DateTime?
  isWearable  Boolean   @default(false)
  addedAt     DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  ip_address  String?
  language    String

  hash String? @unique

  manual_check String?

  processed Boolean @default(false)

  @@index([name, image_id])
  @@index([manual_check, processed])
}

enum ItemType {
  np
  nc
  pb
}

model ItemColor {
  internal_id Int    @id @default(autoincrement())
  image_id    String
  image       String

  lab_l Float
  lab_a Float
  lab_b Float

  hsv_h Float
  hsv_s Float
  hsv_v Float

  rgb_r Float
  rgb_g Float
  rgb_b Float

  hex String

  type       String
  population Float

  isMaxPopulation Boolean @default(false)

  @@unique([image_id, type])
  @@index([image_id, isMaxPopulation])
  @@index([lab_l, lab_a, lab_b])
  @@index([image_id, lab_l, lab_a, lab_b])
  @@index([hsv_h])
}

model ItemPrices {
  internal_id Int       @id @default(autoincrement())
  item_id     Int?
  name        String
  image_id    String?
  price       Decimal   @db.Decimal(11, 0)
  addedAt     DateTime  @default(now())
  processedAt DateTime? @default(now())

  isLatest Boolean?

  manual_check   String?
  noInflation_id Int?
  usedProcessIDs String  @db.Text

  item_iid Int?
  item     Items? @relation(fields: [item_iid], references: [internal_id], onDelete: Cascade, onUpdate: Cascade)

  priceContext String?

  @@unique([item_iid, isLatest])
  @@index([name, image_id])
  @@index([name, addedAt])
  @@index([name, item_iid])
  @@index([manual_check, processedAt])
  @@index([item_iid, addedAt, manual_check])
}

// @deprecated
model PriceProcess {
  internal_id Int      @id @default(autoincrement())
  name        String
  item_id     Int?
  image       String?  @db.Text
  image_id    String?
  owner       String?
  type        String
  otherInfo   String?
  stock       Int      @default(1)
  price       Int
  addedAt     DateTime @default(now())
  ip_address  String?
  language    String

  hash      String? @unique
  neo_id    Int?
  processed Boolean @default(false)

  @@unique([type, neo_id])
  @@index([name, image_id])
  @@index([name, addedAt])
  @@index([name, addedAt, type])
  @@index([name])
  @@index([item_id])
  @@index([addedAt(sort: Desc)])
}

model PriceProcessHistory {
  internal_id Int      @id @default(autoincrement())
  name        String?
  checkedAt   DateTime @default(now())
  item_iid    Int?
  item        Items?   @relation(fields: [item_iid], references: [internal_id], onDelete: SetNull, onUpdate: Cascade)

  // @@index([name])
  @@index([name, checkedAt])
}

model Trades {
  trade_id   Int      @id
  owner      String
  wishlist   String   @db.Text
  ip_address String?
  addedAt    DateTime @default(now())

  processed Boolean @default(false)
  priced    Boolean @default(false)

  hash          String?
  tradesUpdated String? @db.Text

  items TradeItems[]

  auto_ignore_pricing Boolean @default(false)

  isCanonical     Boolean?
  isAllItemsEqual Boolean?
  itemsCount      Int      @default(0)

  @@unique([wishlist(length: 300), isCanonical, isAllItemsEqual, itemsCount])
  @@index([processed, hash])
  @@index([hash, addedAt])
  @@index([wishlist(length: 200)])
}

model TradeItems {
  internal_id Int      @id @default(autoincrement())
  trade_id    Int
  trade       Trades   @relation(fields: [trade_id], references: [trade_id], onDelete: Cascade, onUpdate: Cascade)
  name        String
  image       String
  image_id    String
  order       Int
  price       Decimal? @db.Decimal(11, 0)
  addedAt     DateTime @default(now())

  @@unique([trade_id, order])
  @@index([order, trade_id])
  @@index([name, image_id])
}

model Tags {
  tag_id      Int        @id @default(autoincrement())
  name        String     @unique
  description String?    @db.Text
  addedAt     DateTime   @default(now())
  updateAt    DateTime   @updatedAt
  type        String     @default("tag")
  items       ItemTags[]
}

model ItemTags {
  internal_id Int      @id @default(autoincrement())
  item_iid    Int
  tag_id      Int
  tag         Tags     @relation(fields: [tag_id], references: [tag_id], onDelete: Cascade, onUpdate: Cascade)
  item        Items    @relation(fields: [item_iid], references: [internal_id], onDelete: Cascade, onUpdate: Cascade)
  addedAt     DateTime @default(now())
  added_by    String   @default("SYSTEM")
}

model User {
  id         String   @id
  username   String?  @unique
  neo_user   String?
  email      String   @unique
  role       String   @default("USER")
  createdAt  DateTime @default(now())
  last_login DateTime @default(now())
  last_ip    String?

  pref_lang String?

  profile_color String?
  profile_image String?
  profile_mode  String? @default("default")
  description   String? @db.Text

  xp     Int @default(0)
  old_xp Int @default(0)

  feedbacks      Feedbacks[]
  itemLists      UserList[]
  votes          FeedbackVotes[]
  restockSession RestockSession[]
  DataCollecting DataCollecting[]

  RestockWrapped RestockWrapped[]

  WrappedSettings WrappedSettings[]
  ActionLogs      ActionLogs[]
  NCTrade         ncTrade[]
}

model OpenableItems {
  internal_id    Int      @id @default(autoincrement())
  opening_id     String
  item_iid       Int
  ip_address     String?
  parent_iid     Int?
  notes          String?
  limitedEdition Boolean  @default(false)
  addedAt        DateTime @default(now())

  isManual  Boolean @default(false)
  prizePool String?

  item        Items  @relation("childItem", fields: [item_iid], references: [internal_id], onDelete: Cascade, onUpdate: Cascade)
  parent_item Items? @relation("parentItem", fields: [parent_iid], references: [internal_id], onDelete: Cascade, onUpdate: Cascade)
}

model OpenableQueue {
  internal_id    Int      @id @default(autoincrement())
  parent_name    String
  parent_image   String
  name           String
  image          String
  limitedEdition Boolean  @default(false)
  notes          String?
  ip_address     String?
  opening_id     String
  manual_check   String?
  processed      Boolean  @default(false)
  addedAt        DateTime @default(now())
}

model Feedbacks {
  feedback_id Int      @id @default(autoincrement())
  type        String   @default("feedback")
  subject_id  Int?
  json        Json?
  email       String?  @db.Text
  votes       Int      @default(0)
  addedAt     DateTime @default(now())
  ip_address  String   @default("0")

  processed   Boolean   @default(false)
  approved    Boolean   @default(false)
  processedAt DateTime?

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  vote FeedbackVotes[]

  @@index([type, processed])
  @@index([feedback_id, subject_id])
}

model FeedbackVotes {
  vote_id     Int       @id @default(autoincrement())
  feedback_id Int
  feedback    Feedbacks @relation(fields: [feedback_id], references: [feedback_id], onDelete: Cascade, onUpdate: Cascade)

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  voteWeight Int @default(1)

  approve Boolean
  addedAt DateTime @default(now())

  @@unique([feedback_id, user_id])
}

model UserList {
  internal_id Int                @id @default(autoincrement())
  name        String
  description String?            @db.Text
  user_id     String
  user        User               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cover_url   String?            @db.VarChar(2200)
  official    Boolean            @default(false)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @default(now())
  purpose     UserListPurpose    @default(none)
  visibility  UserListVisibility @default(public)
  colorHex    String?

  sortBy  String @default("name")
  sortDir String @default("asc")
  order   Int?

  dynamicQuery Json?
  dynamicType  DynamicListType?
  linkedListId Int?
  lastSync     DateTime?
  linkedList   UserList?        @relation("linkedLists", fields: [linkedListId], references: [internal_id], onDelete: SetNull, onUpdate: Cascade)
  linkedLists  UserList[]       @relation("linkedLists")

  canBeLinked Boolean @default(false)

  official_tag String?
  listUserTag  String?

  slug String?

  seriesType  SeriesType?
  seriesStart DateTime?
  seriesEnd   DateTime?

  items ListItems[]

  @@unique([slug, user_id])
  @@index([official_tag, official])
  @@index([official, createdAt])
  @@index([user_id, visibility, createdAt])
  @@fulltext([name])
  @@fulltext([description])
  @@fulltext([name, description])
}

enum SeriesType {
  listCreation
  itemAddition
  listDates
}

enum DynamicListType {
  addOnly
  removeOnly
  fullSync
}

enum UserListPurpose {
  none
  seeking
  trading
}

enum UserListVisibility {
  public
  private
  unlisted
}

model ListItems {
  internal_id Int      @id @default(autoincrement())
  list_id     Int
  item_iid    Int
  item        Items    @relation(fields: [item_iid], references: [internal_id], onDelete: Cascade, onUpdate: Cascade)
  list        UserList @relation(fields: [list_id], references: [internal_id], onDelete: Cascade, onUpdate: Cascade)
  addedAt     DateTime @default(now())
  updatedAt   DateTime @updatedAt
  capValue    Int?
  amount      Int      @default(1)
  imported    Boolean  @default(false)
  order       Int?
  isHighlight Boolean  @default(false)

  isHidden Boolean @default(false)

  seriesStart DateTime?
  seriesEnd   DateTime?

  @@unique([list_id, item_iid])
}

model OwlsPrice {
  internal_id Int      @id @default(autoincrement())
  value       String
  valueMin    Int
  pricedAt    DateTime
  addedAt     DateTime @default(now())

  lastChecked DateTime @default(now())

  item_iid Int
  item     Items    @relation(fields: [item_iid], references: [internal_id], onDelete: Cascade, onUpdate: Cascade)
  isLatest Boolean?

  isVolatile Boolean @default(false)
  source     String  @default("owls")

  @@unique([item_iid, isLatest])
  @@index([item_iid, pricedAt(sort: Desc)])
}

model RestockSession {
  session_id String @id @default(uuid())
  user_id    String
  user       User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  addedAt DateTime @default(now())

  modelVersion Int
  startedAt    DateTime
  endedAt      DateTime

  shop_id Int

  // session Json?
  sessionText String? @db.LongText

  // @@index([user_id])
  // @@index([user_id, startedAt])
  @@index([user_id, startedAt, shop_id])
}

model ItemEffect {
  internal_id Int     @id @default(autoincrement())
  item_iid    Int
  type        String
  name        String
  species     String? @db.Text
  minVal      Int?
  maxVal      Int?
  strVal      String?
  text        String? @db.Text
  isChance    Boolean @default(false)

  speciesTarget Int?
  colorTarget   Int?

  addedAt   DateTime @default(now())
  updatedAt DateTime @updatedAt

  item Items? @relation(fields: [item_iid], references: [internal_id], onDelete: Cascade, onUpdate: Cascade)

  @@index([type, item_iid])
}

model WearableData {
  internal_id Int   @id @default(autoincrement())
  item_iid    Int
  item_id     Int
  item        Items @relation(fields: [item_iid], references: [internal_id], onDelete: Cascade, onUpdate: Cascade)

  zone_label       String  @default("")
  zone_plain_label String  @default("")
  species_name     String  @default("")
  isCanonical      Boolean @default(false)

  @@unique([item_iid, zone_label, species_name])
  @@index([zone_label, item_iid, isCanonical])
  @@index([item_iid, isCanonical])
  @@index([zone_plain_label, species_name])
}

model NcMallData {
  internal_id Int   @id @default(autoincrement())
  item_iid    Int
  item_id     Int
  item        Items @relation(fields: [item_iid], references: [internal_id], onDelete: Cascade, onUpdate: Cascade)

  price     Int
  saleBegin DateTime?
  saleEnd   DateTime?

  discountBegin DateTime?
  discountEnd   DateTime?
  discountPrice Int?

  active    Boolean?
  addedAt   DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([item_iid, active])
  @@index([active, saleEnd])
}

model ColorSpecies {
  internal_id Int      @id @default(autoincrement())
  species_id  Int
  color_id    Int
  addedAt     DateTime @default(now())

  @@unique([species_id, color_id])
}

model SaleStats {
  internal_id Int           @id @default(autoincrement())
  item_iid    Int
  item        Items         @relation(fields: [item_iid], references: [internal_id], onDelete: Cascade, onUpdate: Cascade)
  stats       SaleStatsEnum

  totalItems Int
  totalSold  Int
  daysPeriod Int
  isLatest   Boolean?

  addedAt DateTime @default(now())

  @@unique([item_iid, isLatest])
  @@index([item_iid, addedAt])
}

enum SaleStatsEnum {
  ets
  regular
  hts
  unknown
}

model ItemRecipes {
  internal_id Int @id @default(autoincrement())

  result_iid Int   @unique
  result     Items @relation(fields: [result_iid], references: [internal_id], onDelete: Cascade, onUpdate: Cascade)

  type String @default("cookingpot")

  ingredients ItemIngredients[]
}

model ItemIngredients {
  internal_id Int @id @default(autoincrement())

  item_iid Int
  item     Items @relation(fields: [item_iid], references: [internal_id], onDelete: Cascade, onUpdate: Cascade)

  recipe_id Int
  recipe    ItemRecipes @relation(fields: [recipe_id], references: [internal_id], onDelete: Cascade, onUpdate: Cascade)
}

model DataCollecting {
  internal_id Int    @id @default(autoincrement())
  type        String
  item_iid    Int
  item        Items  @relation(fields: [item_iid], references: [internal_id], onDelete: Cascade, onUpdate: Cascade)

  instance_id String

  ip_address String

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  addedAt DateTime @default(now())
}

model RestockWrapped {
  internal_id Int @id @default(autoincrement())

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  dateType     String
  processed_at DateTime @default(now())

  sessionText String? @db.LongText

  @@unique([user_id, dateType])
}

model WrappedSettings {
  internal_id Int @id @default(autoincrement())
  year        Int @default(2024)

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  ready Boolean @default(false)

  settings String @db.LongText

  addedAt   DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([user_id, year])
}

model PetpetColors {
  internal_id Int @id @default(autoincrement())

  color_id  Int
  petpet_id Int
  item_iid  Int

  item Items @relation(fields: [item_iid], references: [internal_id], onDelete: Cascade, onUpdate: Cascade)

  isUnpaintable Boolean  @default(false)
  isCanonical   Boolean?

  @@unique([color_id, petpet_id])
  @@unique([petpet_id, isCanonical])
  @@unique([item_iid])
}

model ActionLogs {
  log_id     Int    @id @default(autoincrement())
  actionType String

  logData Json

  subject_id String?

  addedAt DateTime @default(now())

  user       User?   @relation(fields: [user_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  user_id    String?
  ip_address String?

  @@index([actionType, addedAt])
  @@index([actionType, subject_id, addedAt])
  @@index([user_id, actionType])
}

model ncTrade {
  trade_id  Int      @id @default(autoincrement())
  tradeDate DateTime
  notes     String

  reporter    User   @relation(fields: [reporter_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reporter_id String

  ip_address   String?
  addedAt      DateTime       @default(now())
  NCTradeItems ncTradeItems[]

  @@map("NCTrade")
}

model ncTradeItems {
  internal_id Int     @id @default(autoincrement())
  trade_id    Int
  trade       ncTrade @relation(fields: [trade_id], references: [trade_id], onDelete: Cascade, onUpdate: Cascade)

  item_iid  Int?
  item      Items?  @relation(fields: [item_iid], references: [internal_id], onDelete: Cascade, onUpdate: Cascade)
  item_name String?

  type ncTradeItemType

  personalValue String
  pvMinValue    Int
  pvMaxValue    Int
  quantity      Int    @default(1)

  @@map("NCTradeItems")
}

enum ncTradeItemType {
  offered
  received

  @@map("NCTradeItemType")
}

model ncValues {
  value_id   Int    @id @default(autoincrement())
  item_iid   Int
  item       Items  @relation(fields: [item_iid], references: [internal_id], onDelete: Cascade, onUpdate: Cascade)
  valueRange String
  minValue   Int
  maxValue   Int

  addedAt         DateTime
  processedAt     DateTime? @default(now())
  lastChangeCheck DateTime? @default(now())

  valueContext Json?

  isLatest Boolean?

  @@unique([item_iid, isLatest])
  @@index([item_iid, addedAt])
}

// -------- DISMANTLING PRICE PROCESS --------- //

// this is for the last time each item appeared on the price process for each type
model LastSeen {
  internal_id Int      @id @default(autoincrement())
  item_iid    Int
  item        Items    @relation(fields: [item_iid], references: [internal_id], onDelete: Cascade, onUpdate: Cascade)
  type        String
  lastSeen    DateTime @default(now())

  @@unique([item_iid, type])
  // @@index([item_iid])
  @@index([type, lastSeen])
}

// this is only for price data we actually use (ssw, sw, trades and maybe usershop)
// ideally we should clean this table every now and then
model PriceProcess2 {
  internal_id Int @id @default(autoincrement())

  item_iid Int
  item     Items @relation(fields: [item_iid], references: [internal_id], onDelete: Cascade, onUpdate: Cascade)

  owner      String?
  type       String
  stock      Int      @default(1)
  price      Decimal  @db.Decimal(11, 0)
  addedAt    DateTime @default(now())
  ip_address String?

  hash      String? @unique
  neo_id    Int?
  processed Boolean @default(false)

  @@unique([type, neo_id])
  @@index([processed, addedAt, item_iid])
  @@index([addedAt, processed, item_iid])
  @@index([item_iid, processed, addedAt])
}

// this is mostly for auction and restock data
model RestockAuctionHistory {
  internal_id Int @id @default(autoincrement())

  item_iid Int
  item     Items @relation(fields: [item_iid], references: [internal_id], onDelete: Cascade, onUpdate: Cascade)

  owner      String?
  type       String
  otherInfo  String?
  stock      Int      @default(1)
  price      Int
  addedAt    DateTime @default(now())
  ip_address String?

  hash   String? @unique
  neo_id Int?

  @@unique([type, neo_id])
  @@index([item_iid, type, addedAt])
  @@index([type, addedAt])
}
