name: deploy
on:
  push:
    branches:
      - main
      - master
jobs:
  deploy-itemdb-blue:
    name: itemdb blue (main) - Deploy
    runs-on: ubuntu-latest
    steps:
      - name: itemdb Blue (main) - Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            cd /home/tarnum/itemdb/
            git fetch origin main
            git reset --hard FETCH_HEAD
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            yarn install --immutable
            npx prisma migrate deploy
            pm2 stop ecosystem.config.js --only itemdb-web
            pm2 start itemdb-green
            yarn build-intl
            yarn build || exit
            yarn postbuild
            pm2 stop itemdb-green
            pm2 reload ecosystem.config.js --only itemdb-web --update-env
  deploy-itemdb-green:
    name: itemdb Green (backup) - Deploy
    needs: deploy-itemdb-blue
    runs-on: ubuntu-latest
    steps:
      - name: itemdb Green (backup) - Update
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            cd /home/tarnum/itemdb-green/
            git fetch origin main
            git reset --hard FETCH_HEAD
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            yarn install --immutable
            yarn build-intl
            yarn build-turbo || exit
            yarn postbuild
            pm2 stop ecosystem.config.js --only itemdb-green --update-env
  purge-cloudflare-cache:
    name: Purge Cloudflare Cache
    needs: deploy-itemdb-green
    runs-on: ubuntu-latest
    steps:
      - name: Purge Document Cache
        run: |
          curl -X POST https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -d '{
                  "tags": [
                    "document"
                  ]
                }'
